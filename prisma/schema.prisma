// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  IN
  EVICTED
}

model Houseguest {
  id              String   @id @default(uuid())
  slug            String   @unique
  firstName       String
  lastName        String
  photoUrl        String?
  bio             String?
  status          Status   @default(IN)
  evictionWeek    Int?
  evictionVote    String?
  onTheBlockWeeks Int[]    @default([])

  hohWins         Int[]    @default([])
  povWins         Int[]    @default([])
  blockbusterWins Int[]    @default([])

  // Relations
  picks           Pick[]
  hohWeeks        Week[]   @relation("HOHWinner")
  povWeeks        Week[]   @relation("POVWinner")
  blockbusterWeeks Week[]  @relation("BlockbusterWinner")
  povRemovedWeeks Week[]   @relation("POVRemoved")
  povReplacementWeeks Week[] @relation("POVReplacement")
  evictedWeeks    Week[]   @relation("EvictedNominee")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  photoUrl  String?
  isAdmin   Boolean  @default(false)
  picks     Pick[]
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Pick {
  id           String    @id @default(uuid())
  userId       String
  houseguestId String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Houseguest   Houseguest @relation(fields: [houseguestId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  
  @@unique([userId, houseguestId])
  @@map("picks")
}

model Week {
  id                     String   @id @default(uuid())
  week                   Int      @unique
  hohCompetition         String?
  hohWinnerId            String?  @db.Uuid
  nominees               String[] @default([]) // 3 ids
  povCompetition         String?
  povWinnerId            String?  @db.Uuid
  povUsed                Boolean?
  povRemovedNomineeId    String?  @db.Uuid
  povReplacementId       String?  @db.Uuid
  blockbusterCompetition String?
  blockbusterWinnerId    String?  @db.Uuid
  evictedNomineeId       String?  @db.Uuid
  evictionVote           String?
  updatedAt              DateTime @updatedAt

  // Relations
  hohWinner              Houseguest? @relation("HOHWinner", fields: [hohWinnerId], references: [id])
  povWinner              Houseguest? @relation("POVWinner", fields: [povWinnerId], references: [id])
  blockbusterWinner      Houseguest? @relation("BlockbusterWinner", fields: [blockbusterWinnerId], references: [id])
  povRemovedNominee      Houseguest? @relation("POVRemoved", fields: [povRemovedNomineeId], references: [id])
  povReplacement         Houseguest? @relation("POVReplacement", fields: [povReplacementId], references: [id])
  evictedNominee         Houseguest? @relation("EvictedNominee", fields: [evictedNomineeId], references: [id])

  @@map("weeks")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
